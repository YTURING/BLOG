<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YTURING</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.yturing.com/"/>
  <updated>2020-07-10T09:35:45.971Z</updated>
  <id>https://www.yturing.com/</id>
  
  <author>
    <name>雅雅</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络抓包之我在校园自动签到</title>
    <link href="https://www.yturing.com/2020/05/16/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E4%B9%8B%E6%88%91%E5%9C%A8%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/"/>
    <id>https://www.yturing.com/2020/05/16/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E4%B9%8B%E6%88%91%E5%9C%A8%E6%A0%A1%E5%9B%AD%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/</id>
    <published>2020-05-16T08:09:38.000Z</published>
    <updated>2020-07-10T09:35:45.971Z</updated>
    
    <content type="html"><![CDATA[<p>自从疫情以来，我邮同学就多了一项任务“我在校园健康打卡”，个人觉得这是有些无聊的“形式主义“。秉持能不动手尽量不动手的原则，所以有了下文。开始是想着模拟登录来自动打卡，后来发现encryptData解密实在有些困难。偶然发现微信电脑版小程序的cookie有效期出乎意料的长，快两周了还没见它失效，那下面就简单了。  </p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><ol><li>如果你是一名安全、运维人员，那直接用Fiddle、Charles抓包就行了，一切是那么自然。打开Charles,打开电脑版微信，点击我在校园公众号左下角菜单栏，进入小程序，如果提示登录，登录就行。然后在Charles就可看到小程序抓到的包。复制Cookie字段，”SESSION=“ 后面的字符串备用。<br><img src="/images/20200516154710.png" alt="Charles抓包"><br>如果你只是临时修改一次打卡位置，可以在提交之前，右击student.wozaixiaoyuan.com,设置断点(Breakpoints)，然后点击提交，这时post的数据就被拦截了，找到health/save.json，把里面的键值修改为自己想设置的值即可，默认它还会把经纬度，精确到乡镇发送到服务器，你可以将这些字段删除。如果你想玩，还可以修改为火星，或者完全不存在的地名（希望导员不会找你谈话）。<br><img src="/images/20200516154849.png" alt="断点"></li><li>如果你是一名前端开发人员，可能nodejs用的多。你可以用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2d28vd2hpc3RsZS9ibG9iL21hc3Rlci9SRUFETUUtemhfQ04ubWQ=">whistle<i class="fa fa-external-link-alt"></i></span>来抓包，  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g whistle</span><br></pre></td></tr></table></figure><img src="/images/20200516143534.png" alt="安装whistle"><br>如果安装地慢请自行使用代理或换国内源。然后启动whistle  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w2 start -p 8080 -n <span class="built_in">test</span> -w proxyadmin  </span><br><span class="line">参数说明：</span><br><span class="line">-p 指定抓包的代理端口和网络访问端口  </span><br><span class="line">-n 设置用户名  </span><br><span class="line">-w 设置登录密码 如果你嫌麻烦不想设置用户名和密码，本地到是无所谓，如果是服务器最好设置。</span><br></pre></td></tr></table></figure><img src="/images/20200516144437.png" alt="启动whistle"><br>浏览器打开对应端口即可看到<br><img src="/images/20200516144506.png" alt="网页"><br>登录后看到页面<br><img src="/images/20200516145057.png" alt="首页"><br>点击菜单HTTPS，勾选两个复选框，然后下载根证书(Download RootCA)，双击下载好的rootCA.crt,安装证书到”受信任的根证书颁发机构“。<br><img src="/images/20200516152614.png" alt="下载证书"><br><img src="/images/20200516152759.png" alt="安装证书"><br><img src="/images/20200516152817.png" alt="安装证书"><br><img src="/images/20200516152840.png" alt="安装证书"><br><img src="/images/20200516152913.png" alt="安装证书"><br>设置代理，注意要点击保存。<br><img src="/images/20200516153012.png" alt="设置代理"><br><img src="/images/20200516153126.png" alt="设置代理"><br>这种代理的好处是你可以部署到服务器，然后通过web访问。<br>打开小程序抓包<br>打开电脑版微信，打开小程序。<br><img src="/images/20200516153303.png" alt="打开小程序"><br><img src="/images/20200516153716.png" alt="打开小程序"><br>你可以点击上面菜单栏[Filter]过滤student.wozaixiaoyuan.com,只抓我在校园的包，然后点击任意一个包<br><img src="/images/20200516153744.png" alt="抓包"><br><img src="/images/20200516154059.png" alt="抓包"><br>点击包之后点击菜单栏Compose,右边就会出现包的详细内容，复制”SESSION=”后面的字符串备用。如果你只是临时修改，那就把POST后面URL中的home.json换为health/save.json ,在下面body里面填上<code>answers=%5B%220%22%5D&amp;country=%E4%B8%AD%E5%9B%BD&amp;city=&amp;district=&amp;province=</code>，city等号后面写上城市名，district等号后面写上区名，province后面写上省份名，如果你真的有症状，可以把answers等号后面的0改为你症状的数字减一，具体看小程序。国家就把country等号后面&amp;前面的字符串改为对应国家。修改完成后点击Go。<br>抓完了停止whistle即可,然后在Windows系统设置里把代理关掉。<br><img src="/images/20200516154359.png" alt="停止w2">  </li></ol><h3 id="自动打卡"><a href="#自动打卡" class="headerlink" title="自动打卡"></a>自动打卡</h3><p>如果你有一台Linux服务器，自动打卡就很方便了，定时执行cURL或写个Python脚本，定时执行，Windows上面你可以用计划程序，理论上也可以自动打卡，但它的执行成功率我没测试过，感兴趣的可以用windows试试。下面以Linux为例：<br>wzxy.py  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import requests,random</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">        &#39;Host&#39;: &#39;student.wozaixiaoyuan.com&#39;,</span><br><span class="line">        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Linux; Android 10; Build&#x2F;QQ2A.200405.005; wv) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Version&#x2F;4.0 Chrome&#x2F;80.0.3987.132 Mobile Safari&#x2F;537.36 MicroMessenger&#x2F;6.7.3.1341(0x26070340) NetType&#x2F;WIFI Language&#x2F;en Process&#x2F;appbrand0&#39;,</span><br><span class="line">        &#39;Cookie&#39;: &#39;SESSION&#x3D;; Path&#x3D;&#x2F;; HttpOnly&#39;,</span><br><span class="line">        &#39;token&#39;: &#39;&#39;,</span><br><span class="line">        &#39;Referer&#39;: &#39;https:&#x2F;&#x2F;servicewechat.com&#x2F;wxce6d08f781975d91&#x2F;114&#x2F;page-frame.html&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">te &#x3D; &quot;0 1 &quot;  + &quot;目前体温&quot; + str(random.randint(365,370)&#x2F;10) + &quot;℃&quot;  # 随机生成一定范围的温度（36.5-37.0），可修改</span><br><span class="line">postdata &#x3D; &#123;</span><br><span class="line">        &#39;answers&#39;: str(te.split()),</span><br><span class="line">        &#39;country&#39;: &#39;中国&#39;,</span><br><span class="line">        &#39;city&#39;: &#39;西安市&#39;,</span><br><span class="line">        &#39;district&#39;: &#39;&#39;,</span><br><span class="line">        &#39;province&#39;: &#39;陕西省&#39;</span><br><span class="line">        &#125;</span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;student.wozaixiaoyuan.com&#x2F;health&#x2F;save.json&#39;</span><br><span class="line">session &#x3D; requests.Session()</span><br><span class="line">response &#x3D; session.post(url, data&#x3D;postdata, headers&#x3D;headers)</span><br></pre></td></tr></table></figure><p>这是python3脚本，在SESSION=后面填上刚才让保存的字符串。然后city、district、province填自己的即可。如果想修改自己的机型和系统版本，在User-Agent里修改就行。<br>然后设置定时执行  </p><hr><p><strong>2020.7.10 更新</strong><br>本不打算更新的，反正没人看，昨天看到黎同学的回复，所以才有了今天的故事。<br>自cookie不失效在公众号发布以后，我在校园就在小程序的登录返回了一个token字段，后面打卡需要用到。目前还没找到方法破解，经过一个多月的时间，token很稳定地4天失效一次，所以需要每4天抓一次token换到脚本里，剩下的剩下的就交给脚本自动打卡就行了。<br>还有黎同学提到了检测设备，我虽没明说，上面也有提到。黎同学给出了UA列表（<span class="exturl" data-url="aHR0cDovL3d3dy5meW5hcy5jb20vdWHvvInvvIzlr7nkuo7kuI3kvJrmipPmiYvmnLrljIXnmoTlkIzlrabov5jmmK/lvojmnInnlKjnmoTvvIzlpoLmnpzkvJrmipPljIXvvIzmipPkuIDkuIvoh6rlt7HmiYvmnLrnmoTvvIznhLblkI7loavkuIrlsLHooYzjgII=">http://www.fynas.com/ua），对于不会抓手机包的同学还是很有用的，如果会抓包，抓一下自己手机的，然后填上就行。<i class="fa fa-external-link-alt"></i></span><br>在此感谢黎同学的付出和给我更新的动力！</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root<span class="comment"># crontab -e    //命令行输入crontab -e就会进入到一个界面，具体进入哪个界面和你设置有关，你设置的vim编辑器进入的就是vim，设置的nano就是nano。  </span></span><br><span class="line">写上：</span><br><span class="line">0 7 * * * /usr/bin/python3 /home/wzxy.py  </span><br><span class="line">保存退出即可。上面这行表示每天早上7点定时执行，前面5个字段分别代表分钟、小时、日、月、周。</span><br><span class="line">后面/home/wzxy.py是你保存的python脚本的位置。</span><br></pre></td></tr></table></figure><p><img src="/images/20200516155643.png" alt="记录"><br>这是执行记录，已经稳定自动打卡13天，cookie还未失效。<br>不建议使用手机端cookie，失效过快。如果想临时修改位置，除了使用修改定位软件，也可以在在手机上上抓包修改，比如安卓有httpcanary，无需root但要抓小程序的包得微信7.0.0以下版本或者Android 7.0以下版本，如果已经root，就无所谓版本了，把根证书安装到/system/etc/security/cacerts目录下用证书哈希.0命名，可能会遇到挂载问题，<code>mount -o rw,remount /</code>。ios也有对应的抓包软件，比如stream，抓到修改post参数即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自从疫情以来，我邮同学就多了一项任务“我在校园健康打卡”，个人觉得这是有些无聊的“形式主义“。秉持能不动手尽量不动手的原则，所以有了下文。开始是想着模拟登录来自动打卡，后来发现encryptData解密实在有些困难。偶然发现微信电脑版小程序的cookie有效期出乎意料的长，
      
    
    </summary>
    
    
      <category term="网络" scheme="https://www.yturing.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="我在校园" scheme="https://www.yturing.com/tags/%E6%88%91%E5%9C%A8%E6%A0%A1%E5%9B%AD/"/>
    
      <category term="抓包" scheme="https://www.yturing.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Lenovo 小新Pro13 VMware workstation虚拟机安装黑苹果</title>
    <link href="https://www.yturing.com/2020/05/08/Lenovo-%E5%B0%8F%E6%96%B0Pro13-VMware-workstation%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    <id>https://www.yturing.com/2020/05/08/Lenovo-%E5%B0%8F%E6%96%B0Pro13-VMware-workstation%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C/</id>
    <published>2020-05-08T07:58:37.000Z</published>
    <updated>2020-07-10T09:12:35.370Z</updated>
    
    <content type="html"><![CDATA[<p>听说AMD上装黑苹果不好装，结果就试了一把，把我的安装步骤分享给大家，顺便说一句，Mac体验真的爽。<br>环境：联想小Pro13(就是那个年度真香机)，CPU：AMD Ryzen 5 3550H(各种问题主要是出在这里，人家Intel就很稳)，VMware Workstation <span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZDMudm13YXJlLmNvbS9zb2Z0d2FyZS93a3N0L2ZpbGUvVk13YXJlLXdvcmtzdGF0aW9uLWZ1bGwtMTUuMS4wLTEzNTkxMDQwLmV4ZQ==">15.1.0<i class="fa fa-external-link-alt"></i></span>(注意软件版本，太新了也安装不上)，目标系统：MacOS 10.12、10.13。至于安装镜像，第一次安装的话，可以用别人制作好的iso镜像，以后熟了可以自己用黑苹果把dmg转为iso。  </p><h2 id="安装unlocker"><a href="#安装unlocker" class="headerlink" title="安装unlocker  "></a>安装unlocker  </h2><p>VMware Workstation 低版本不支持直接安装MacOS(据说高版本可以，我没试过)，所以需要给VMware打个补丁。可以在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bhb2xvLXByb2plY3RzL3VubG9ja2VyL3JlbGVhc2Vz">Github<i class="fa fa-external-link-alt"></i></span>上下载，下载好后解压到随便哪个目录，然后右键”以管理员身份运行” win-install.cmd,等待它安装成功即可，在这过程中它会下载个文件，可能你需要使用代理才会下载地快些。<br><img src="/images/20200507185913.png" alt="unlocker安装">  </p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机  "></a>安装虚拟机  </h2><ol><li><p>打开VMware workstation,自定义安装，选择下载好的镜像，选择客户机操作系统(Apple Mac OSX(M)),版本就根据你下载的镜像选择，我安装的是10.12和10.13。接下来是填写虚拟机名称，选择虚拟机文件的存放位置。处理器和内存根据自己的电脑配置选择合适的量。网络连接随便选，有兴趣可以下去了解一下桥接和NAT，我这里选择的是NAT，虚拟机可以直接上网，桥接也可以。仅主机模式也可以，不过要在适配器属性里设置一下分享。然后剩下的默认就行。<br><img src="/images/20200507190105.png" alt="选择镜像"><br><img src="/images/20200507190127.png" alt="选择系统"><br><img src="/images/20200507190248.png" alt="命名及位置"><br><img src="/images/20200507190316.png" alt="处理器"><br><img src="/images/20200507190333.png" alt="内存"><br><img src="/images/20200507190355.png" alt="网络"><br><img src="/images/20200507190408.png" alt="SCSI控制器"><br><img src="/images/20200507190423.png" alt="磁盘类型"><br><img src="/images/20200507190439.png" alt="磁盘">  </p></li><li><p>打开虚拟机文件存放的目录，打开.vmx文件，加入以下内容，否则开启虚拟机会提示客户机操作系统已禁用CPU。注意要加的位置是<code>smc.present = &quot;TRUE&quot;</code>下面。最后两行keyboard和mouse是为了在安装MacOS时让鼠标可以动，不设置是动不了的。最后还要把顶部第三行virtualHW.version = “16”中的，16改为10，然后存文件。然后开启虚拟机，如果提示 该虚拟机要求使用AVX2,但AVX不存在 ，请检查把16改为10改好了没，如果改好了，虚拟机详细信息那里会显示 硬件兼容性：Workstation 10.x虚拟机 。如果是没生效可以试试退出VMware workstation重新打开试试。  </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">smc.version = <span class="string">"0"</span></span><br><span class="line">cpuid.0.eax = <span class="string">"0000:0000:0000:0000:0000:0000:0000:1011"</span></span><br><span class="line">cpuid.0.ebx = <span class="string">"0111:0101:0110:1110:0110:0101:0100:0111"</span></span><br><span class="line">cpuid.0.ecx = <span class="string">"0110:1100:0110:0101:0111:0100:0110:1110"</span></span><br><span class="line">cpuid.0.edx = <span class="string">"0100:1001:0110:0101:0110:1110:0110:1001"</span></span><br><span class="line">cpuid.1.eax = <span class="string">"0000:0000:0000:0001:0000:0110:0111:0001"</span></span><br><span class="line">cpuid.1.ebx = <span class="string">"0000:0010:0000:0001:0000:1000:0000:0000"</span></span><br><span class="line">cpuid.1.ecx = <span class="string">"1000:0010:1001:1000:0010:0010:0000:0011"</span></span><br><span class="line">cpuid.1.edx = <span class="string">"0000:1111:1010:1011:1111:1011:1111:1111"</span></span><br><span class="line">featureCompat.enable = <span class="string">"FALSE"</span></span><br><span class="line">keyboard.vusb.enable = <span class="string">"TRUE"</span></span><br><span class="line">mouse.vusb.enable = <span class="string">"TRUE"</span></span><br></pre></td></tr></table></figure><p><img src="/images/20200507190704.png" alt="客户机系统已禁用CPU"><br><img src="/images/20200507190813.png" alt="vmx"><br><img src="/images/20200507191025.png" alt="修改vmx"><br><img src="/images/20200507191257.png" alt="鼠标"><br><img src="/images/20200507191500.png" alt="vmx"><br><img src="/images/20200507191602.png" alt="vmx"><br><img src="/images/20200507193135.png" alt="虚拟机详细信息">  </p></li><li><p>打开虚拟机后，看到苹果图标等进度条走完，进入到选择语言界面，你会发现鼠标还是不能动，关闭虚拟机，点击编辑虚拟机设置，在USB控制器那里把USB兼容性1.1改为2.0，你可能会问为什么不一开始就选择，这是因为这个1.1是在打开虚拟机进入到语言选择界面才变的。<br><img src="/images/20200507193051.png" alt="选择语言"><br><img src="/images/20200507193205.png" alt="USB"><br><img src="/images/20200507193230.png" alt="USB">  </p></li><li><p>然后就进入到安装系统界面，点击顶栏的磁盘工具，选择左侧虚拟磁盘，抹掉，名称随意，方案选主引导记录和GUID分区图都行。然后点击顶部终端，在终端里输入<code>csrutil disable</code>,然后<code>csrutil status</code>查看状态，这是为了安装VMware tools后可以全屏。<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kN2Q0ZDdiYTk1YTM=">具体参考<i class="fa fa-external-link-alt"></i></span>,接下来选择刚才抹掉的磁盘，安装系统，等进度条走完就好了。<br><img src="/images/20200507194010.png" alt="磁盘工具"><br><img src="/images/20200507194128.png" alt="抹掉磁盘"><br><img src="/images/20200507194224.png" alt="终端"><br><img src="/images/20200507194434.png" alt="选择磁盘"><br><img src="/images/20200507194525.png" alt="安装系统">  </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;听说AMD上装黑苹果不好装，结果就试了一把，把我的安装步骤分享给大家，顺便说一句，Mac体验真的爽。&lt;br&gt;环境：联想小Pro13(就是那个年度真香机)，CPU：AMD Ryzen 5 3550H(各种问题主要是出在这里，人家Intel就很稳)，VMware Worksta
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://www.yturing.com/categories/Windows/"/>
    
    
      <category term="虚拟机" scheme="https://www.yturing.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
      <category term="MacOS" scheme="https://www.yturing.com/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Install YouCompleteMe on CentOS8</title>
    <link href="https://www.yturing.com/2019/11/10/Install-YouCompleteMe-on-CentOS8/"/>
    <id>https://www.yturing.com/2019/11/10/Install-YouCompleteMe-on-CentOS8/</id>
    <published>2019-11-10T11:48:42.000Z</published>
    <updated>2020-07-10T09:12:35.370Z</updated>
    
    <content type="html"><![CDATA[<p>能用Vim搭建自己的IDE吗？当然可以。<br>接下来记录一下自己是怎么在CentOS8上安装YouCompleteMe的以及遇到的问题，希望能帮到遇到相似问题的。</p><ol><li>首先安装预备环境  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install cmake gcc-c++ make git python3-devel  //CentOS系</span><br><span class="line">sudo apt install build-essential cmake git python3-dev  //Debian系</span><br></pre></td></tr></table></figure></li><li>然后安装<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Z1bmRsZVZpbS9WdW5kbGUudmlt">Vundle<i class="fa fa-external-link-alt"></i></span>,Vundle是Vim的插件管理器。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure></li><li>接下来  <code>vim ~/.vimrc</code> ,写入如下内容：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> backspace=2</span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> nocompatible              <span class="string">" be iMproved, required</span></span><br><span class="line"><span class="string">filetype off                  "</span> required</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="built_in">set</span> softtabstop=4</span><br><span class="line"><span class="built_in">set</span> t_Co=256</span><br><span class="line"><span class="string">"syntax on</span></span><br><span class="line"><span class="string">highlight PMenu ctermfg=14 ctermbg=235 guifg=#ff005f  guibg=black</span></span><br><span class="line"><span class="string">highlight PMenuSel ctermfg=231 ctermbg=235 guifg=#ff005f   guibg=black</span></span><br><span class="line"><span class="string">"</span> <span class="built_in">set</span> the runtime path to include Vundle and initialize</span><br><span class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle<span class="comment">#begin()</span></span><br><span class="line"><span class="string">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="string">"</span>call vundle<span class="comment">#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="string">" let Vundle manage Vundle, required</span></span><br><span class="line"><span class="string">Plugin 'VundleVim/Vundle.vim'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> The following are examples of different formats supported.</span><br><span class="line"><span class="string">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="string">"</span> plugin on GitHub repo</span><br><span class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line"><span class="string">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="string">Plugin 'L9'</span></span><br><span class="line"><span class="string">"</span> Git plugin not hosted on GitHub</span><br><span class="line">Plugin <span class="string">'git://git.wincent.com/command-t.git'</span></span><br><span class="line"><span class="string">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="string">"</span>Plugin <span class="string">'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="string">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="string">"</span> Pass the path to <span class="built_in">set</span> the runtimepath properly.</span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line">Plugin <span class="string">'Raimondi/delimitMate'</span></span><br><span class="line">Plugin <span class="string">'scrooloose/syntastic'</span></span><br><span class="line">Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</span><br><span class="line"><span class="string">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="string">"</span> different version somewhere <span class="keyword">else</span>.</span><br><span class="line"></span><br><span class="line"><span class="string">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="string">call vundle#end()            "</span> required</span><br><span class="line">filetype plugin indent on    <span class="string">" required</span></span><br><span class="line"><span class="string">"</span> To ignore plugin indent changes, instead use:</span><br><span class="line"><span class="string">"filetype plugin on</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">" Brief help</span></span><br><span class="line"><span class="string">"</span> :PluginList       - lists configured plugins</span><br><span class="line"><span class="string">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="string">"</span> :PluginSearch foo - searches <span class="keyword">for</span> foo; append `!` to refresh <span class="built_in">local</span> cache</span><br><span class="line"><span class="string">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span></span><br><span class="line"><span class="string">"</span><span class="built_in">let</span> g:ycm_key_invoke_completion = <span class="string">'&lt;c-j&gt;'</span></span><br><span class="line"><span class="built_in">let</span> g:jedi<span class="comment">#force_py_version=3.6.8</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_python_binary_path = <span class="string">'/usr/bin/python3'</span></span><br><span class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf=<span class="string">'~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> completeopt=longest,menu</span><br><span class="line">autocmd InsertLeave * <span class="keyword">if</span> pumvisible() == 0|pclose|endif</span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt;       pumvisible() ? <span class="string">"\&lt;C-y&gt;"</span> : <span class="string">"\&lt;CR&gt;"</span></span><br><span class="line"><span class="string">"inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? "</span>\&lt;C-n&gt;<span class="string">" : "</span>\&lt;Down&gt;<span class="string">"</span></span><br><span class="line"><span class="string">"</span>inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? <span class="string">"\&lt;C-p&gt;"</span> : <span class="string">"\&lt;Up&gt;"</span></span><br><span class="line"><span class="string">"inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? "</span>\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;<span class="string">" : "</span>\&lt;PageDown&gt;<span class="string">"</span></span><br><span class="line"><span class="string">"</span>inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? <span class="string">"\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;"</span> : <span class="string">"\&lt;PageUp&gt;"</span>  </span><br><span class="line"><span class="built_in">let</span> g:ycm_key_list_select_completion = [<span class="string">'&lt;Down&gt;'</span>]</span><br><span class="line"><span class="built_in">let</span> g:ycm_key_list_previous_completion = [<span class="string">'&lt;Up&gt;'</span>]</span><br><span class="line"><span class="string">"let g:ycm_confirm_extra_conf=0</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_tags_files=1</span></span><br><span class="line"><span class="string">let g:ycm_min_num_of_chars_for_completion=2</span></span><br><span class="line"><span class="string">let g:ycm_cache_omnifunc=0</span></span><br><span class="line"><span class="string">let g:ycm_seed_identifiers_with_syntax=1</span></span><br><span class="line"><span class="string">nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt;</span></span><br><span class="line"><span class="string">inoremap &lt;leader&gt;&lt;leader&gt; &lt;C-x&gt;&lt;C-o&gt;</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_comments = 1</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_strings = 1</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_comments_and_strings = 0  </span></span><br><span class="line"><span class="string">hi MatchParen ctermbg=62  guibg=lightblue</span></span><br></pre></td></tr></table></figure></li><li>上面是一些自动补全及颜色的配置项，我个人的喜欢的配置，可以自行修改。然后在命令行输入 <code>vim</code> ，进入vim的命令行模式以后输入 <code>:PluginInstall</code> ,即可进入插件安装，有些插件可能对国内网络不是很友好，可开启命令行代理再进入安装。  </li><li>最后是 YouCompleteMe 的安装，  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe  </span><br><span class="line">python3 ./install.py --clang-completer --ts-completer --go-completer  </span><br><span class="line">cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py   ~/.vim/bundle/YouCompleteMe/  </span><br><span class="line">--clang-completer 是 C 、C++、Python等语言的补全，--ts-complete 是JavaScript、TypeScript的补全,--go-completer是Go语言的补全。  </span><br><span class="line">在安装的时候你可能会遇到这样的问题：  </span><br><span class="line"></span><br><span class="line">go: golang.org/x/sync@v0.0.0-20190423024810-112230192c58: unrecognized import path <span class="string">"golang.org/x/sync"</span> (https fetch: Get https://golang.org/x/sync?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused)</span><br><span class="line">go: golang.org/x/net@v0.0.0-20190620200207-3b0461eec859: unrecognized import path <span class="string">"golang.org/x/        net"</span> (https fetch: Get https://golang.org/x/net?go-get=1: dial tcp 216.239.37.1:443: connect:         connection refused)</span><br><span class="line">go: golang.org/x/xerrors@v0.0.0-20190717185122-a985d3407aa7: unrecognized import path <span class="string">"golang.org/        x/xerrors"</span> (https fetch: Get https://golang.org/x/xerrors?go-get=1: dial tcp 216.239.37.1:443:         connect: connection refused)</span><br><span class="line">go: error loading module requirements  </span><br><span class="line">  </span><br><span class="line">许多人说开代理就可以解决，但是我开了代理还是报错，最后试出这样可以：  </span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/sync.git   ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x/  </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/net.git   ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x/  </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/xerrors.git   ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org/x/  </span><br><span class="line"><span class="built_in">export</span> GOPATH=/root/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/go  </span><br><span class="line">python3 ./install.py --clang-completer --ts-completer --go-completer  </span><br><span class="line">cp ~/.vim/bundle/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py   ~/.vim/bundle/YouCompleteMe/</span><br></pre></td></tr></table></figure>结束啦，感谢那些为vim的使用体验提升不断努力的大佬们！</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;能用Vim搭建自己的IDE吗？当然可以。&lt;br&gt;接下来记录一下自己是怎么在CentOS8上安装YouCompleteMe的以及遇到的问题，希望能帮到遇到相似问题的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先安装预备环境  &lt;figure class=&quot;highlight bash&quot;&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.yturing.com/categories/Linux/"/>
    
    
      <category term="Vim" scheme="https://www.yturing.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>nginx提供TLS1.3支持</title>
    <link href="https://www.yturing.com/2019/10/19/Let-nginx-support-TLS1-3/"/>
    <id>https://www.yturing.com/2019/10/19/Let-nginx-support-TLS1-3/</id>
    <published>2019-10-19T13:30:39.000Z</published>
    <updated>2020-07-10T09:12:35.370Z</updated>
    
    <content type="html"><![CDATA[<p>作为更具安全性的TLS1.3，浏览器也都逐渐支持，是时候网站也升级为TLS1.3了（<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmhhY2tlcmNoYWkuY29tL2VuY3J5cHRlZC1zbmktYW50aS1jZW5zb3JzaGlwLw==">ESNI<i class="fa fa-external-link-alt"></i></span>也是个好东西，感兴趣可以了解下），接下来就说一下让Nginx支持TLS1.3的方法。    </p><ol><li><p>需要nginx支持TLS1.3有两种方法，一种是让系统的openssl版本1.1.1+，或者直接把高版本的openssl编译进nginx。<br>这里使用第二种方法。  </p><pre><code class="Bash">$ wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_1d.tar.gz     $ wget http://nginx.org/download/nginx-1.16.1.tar.gz        $ tar zxvf OpenSSL_1_1_1d.tar.gz        $ tar zxvf nginx-1.16.1.tar.gz      $ sudo mv  openssl-OpenSSL_1_1_1d /usr/<span class="built_in">local</span>/src/openssl        $ sudo mv  nginx-1.16.1  /usr/<span class="built_in">local</span>/src/nginx          $ sudo apt-get install build-essential libtool gcc automake autoconf make libpcre3 libpcre3-dev  zlib1g-dev   （Ubuntu装这些依赖）      $ sudo yum install pcre pcre-devel zlib zlib-dev gcc gcc-c++  (CentOS装这些依赖)        $ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx       $ sudo ./configure  --prefix=/usr/<span class="built_in">local</span>/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-openssl=/usr/<span class="built_in">local</span>/src/openssl     这些模块自己自己选需要的        $ sudo make &amp;&amp; make install        //等待它编译完成就好了       $ nginx -V                         //可以看到把openssl编译进去了  </code></pre><p><img src="/images/20191019210735.png" alt="openssl">  </p></li><li><p>接下来我们修改一下nginx.conf配置文件。  </p><pre><code class="Bash">ssl_protocols TLSv1.2 TLSv1.3;   //这里把TLSv1.3加上        ssl_prefer_server_ciphers on;       add_header Strict-Transport-Security <span class="string">"max-age=63072000; includeSubdomains; preload"</span>;        ssl_ciphers <span class="string">'TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256'</span>;   //加密方法加上前三个，这三个是TLS1.3的加密方法        ssl_session_cache <span class="built_in">builtin</span>:1000 shared:SSL:10m;      ssl_buffer_size 1400;  </code></pre></li><li><p><code>sudo nginx -s reload</code> 就可以在浏览器中看到了。      </p></li></ol><p><img src="/images/20191019211750.png" alt="TLS1.3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为更具安全性的TLS1.3，浏览器也都逐渐支持，是时候网站也升级为TLS1.3了（&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ibG9nLmhhY2tlcmNoYWkuY29tL2VuY3J5cHRlZC1zbmktYW50aS1j
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://www.yturing.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://www.yturing.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-theme-Next 升级出现的问题</title>
    <link href="https://www.yturing.com/2019/10/19/Hexo-theme-Next-update-problem/"/>
    <id>https://www.yturing.com/2019/10/19/Hexo-theme-Next-update-problem/</id>
    <published>2019-10-19T11:23:07.000Z</published>
    <updated>2020-07-10T09:12:35.370Z</updated>
    
    <content type="html"><![CDATA[<p>突然想升级一下Hexo主题，升级完发现文章全部成了白色，还以为我哪里弄错了，最后才发现是cdn问题，因为我用的是cloudflare，默认speed下的Rocket Loader是开启的，hexo-theme-next官方说这个会有冲突。关了就可以正常显示了。  </p><p><img src="/images/20191019200643.png" alt="cloudflare"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然想升级一下Hexo主题，升级完发现文章全部成了白色，还以为我哪里弄错了，最后才发现是cdn问题，因为我用的是cloudflare，默认speed下的Rocket Loader是开启的，hexo-theme-next官方说这个会有冲突。关了就可以正常显示了。  &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.yturing.com/categories/Linux/"/>
    
    
      <category term="Hexo" scheme="https://www.yturing.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Learn-Docker</title>
    <link href="https://www.yturing.com/2019/07/25/learn-docker/"/>
    <id>https://www.yturing.com/2019/07/25/learn-docker/</id>
    <published>2019-07-25T10:41:17.000Z</published>
    <updated>2020-07-10T09:12:35.370Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学Docker,用的是国内的《Docker 容器与容器云》，这里记录一下我遇到的问题。<br>第一个Docker应用栈，HAProxy作为代理节点，Django 作两个web应用节点，redis作一个主数据库节点，另外两个数据库作从数据库节点。  </p><ol><li><p>docker pull把镜像拉下来启动时，书上提到了第一次启动用  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name redis-master redis /bin/bash</span><br></pre></td></tr></table></figure><p> 但没有提到启动后如何后台运行，可能已激动就exit了，后面两个从数据库link时就会发现报错，因为前面前面启动的容器已经在exit时停止运行了，所以连接不上。那怎么办呢?  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis-master /bin/bash</span><br></pre></td></tr></table></figure><p> 以这种方式启动，即使exit容器也不会停止。  </p></li><li><p>接下来是找redis映射到宿主机的目录，书上用的是 <code>docker inspect --format &quot;{ .Volume }&quot; bc8e</code> 执行后你会发现，找不到，把Volume改为Mounts试试。目录也不是 <code>/var/lib/docker/vfs/......</code> 而是 <code>/var/lib/docker/volumes/.....</code>  </p></li><li><p>然后是redis配置文件，我是直接下载 <span class="exturl" data-url="aHR0cDovL2Rvd25sb2FkLnJlZGlzLmlvL3JlZGlzLXN0YWJsZS9yZWRpcy5jb25m">redis<i class="fa fa-external-link-alt"></i></span>官方配置文件进行修改的，但在进行数据库节点测试时发现，数据始终同步不到从节点，<code>slaveof master 6379</code> 确是返回ok的。最后查得，要在<strong>redis.conf</strong>文件里在<strong>bind 127.0.0.1</strong>后面加上从节点的IP。 因为127.0.0.1是只允许本机访问，比如我是这样写的。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 172.17.0.3 172.17.0.4 172.17.0.2</span><br></pre></td></tr></table></figure><p>这是主节点的，写上自己的IP和两个从节点的IP，如果是从节点就写上自己IP和主节点IP，有些人用bind 0.0.0.0也可以，但这样可能会不安全。接下来重启一下redis-server，再测试应该就好了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学Docker,用的是国内的《Docker 容器与容器云》，这里记录一下我遇到的问题。&lt;br&gt;第一个Docker应用栈，HAProxy作为代理节点，Django 作两个web应用节点，redis作一个主数据库节点，另外两个数据库作从数据库节点。  &lt;/p&gt;
&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.yturing.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.yturing.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo</title>
    <link href="https://www.yturing.com/2018/08/22/Building-a-blog-from-scratch/"/>
    <id>https://www.yturing.com/2018/08/22/Building-a-blog-from-scratch/</id>
    <published>2018-08-22T10:08:08.000Z</published>
    <updated>2020-07-10T09:12:35.370Z</updated>
    
    <content type="html"><![CDATA[<p>　　写一下hexo怎么搭建，以免自己以后忘记。<br>　　首先得确定你是在windows平台上工作还是在linux平台上工作，这两种方式本地环境配置其实大同小异。</p><h3 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h3><p>　　因为只装了windows 10,其他版本windows请自己搞定。     </p><ol><li>安装Git。下载好软件，安装时基本一路next就行。然后是配置git，如果没有自己的github账号请自行注册一个。右键打开git bash,生成密钥(为什么要生成密钥？因为这样就不用每推送一次都要输入密码了)。你想改变路径或给密钥再加一层密码也许，否则一路回车就行了。然后在git bash命令行窗口输入你的信息：     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$   git config --global user.email <span class="string">"you@example.com"</span>  //注册github时的邮箱</span><br><span class="line">$   git config --global user.name <span class="string">"Your Name"</span>   //github用户名</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/20180823141949.png" alt="生成密钥">      </p><p>将C盘/Users/用户名/.ssh/id_rsa.pub文件中的内容添加到你的github，     </p><p><img src="/images/20180822170535.png" alt="添加密钥">      </p><p>在C:\Users\konoha\.ssh\目录下新建文件config,里面写上下面图片中的内容除了箭头所指私钥路径要改，其他不用改。      </p><p><img src="/images/20180822172307.png" alt="git配置"></p><ol start="2"><li>安装nodejs。从网上下载后进行安装时最好修改一下安装目录，不要安装在C盘，</li></ol><p><img src="/images/20180821211456.png" alt="不要安装在C盘">          </p><p>　　安装好nodejs后修改一下环境变量，让以后的模块都安装到软件安装目录，如果不知道怎么修改环境变量，请先百度/Google。再此之前，先在软件安装目录新建两个文件夹 node_global、node_cache。            </p><p>在Powershell下输入(不要直接抄，看你的目录具体是什么)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"D:\Program Files\nodejs\node_global"</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">"D:\Program Files\nodejs\node_cache"</span></span><br></pre></td></tr></table></figure><p><img src="/images/20180821212347.png" alt="修改系统变量">        </p><p>　　新建系统环境变量，变量名 NODE_PATH,变量值为你的软件安装目录下node_global/node_modules,比如我的是D:\Program Files\nodejs\node_global\node_modules      </p><p><img src="/images/20180821211839.png" alt="修改系统环境变量">      </p><p>　　修改用户环境变量下的Path,把C:\……\npm 修改为软件安装目录下的node_global,比如我的就改为D:\Program Files\nodejs\node_global</p><p><img src="/images/20180821212001.png" alt="修改用户环境变量">      </p><ol start="3"><li>安装Hexo。你再Powershell下输入<code>npm install -g hexo-cli</code> 会发现它就卡那儿了，没错，被墙了，有梯子的可以设置一下终端代理，然后继续进行就行了，没有梯子的就跟着下面使用阿里的镜像就行。Powershell(我喜欢用Powershell，你们随便)输入如下命令。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><img src="/images/20180822183824.png" alt="安装cnpm">        </li></ol><p>　　先打开你你要工作的目录，输入命令        </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g hexo-cli</span><br><span class="line">$ hexo init &lt;folder&gt;(随便起个文件夹名)(如果这一步卡住不动了，Ctrl+C继续下面的)</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ cnpm install </span><br><span class="line">$ cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="/images/20180822185317.png" alt="安装hexo">        </p><p>　　输入下面命令，先预览一下，进入浏览器输入网址进行预览，预览完记得Ctrl+C结束，后者会占用端口。      </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/20180822190745.png" alt="完成安装">      </p><p><img src="/images/20180822191100.png" alt="预览">        </p><p>　　这就初步安装好了。<br>　　可能你觉得这主题并不是很好看，可以自己去网上找一些自己喜欢的主题，设置一下。比如我用的是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0Lw==">Next<i class="fa fa-external-link-alt"></i></span>,在hexo根目录(也就是有/source、_config.yml等文件的目录)下输入如下命令建立主题目录：         </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir themes/next</span><br></pre></td></tr></table></figure><p>　　因为Powershell对某些linux命令不支持，比如grep，所以不能用github上作者提供的命令，我们可以下载下来，然后解压到next目录。然后再修改config.yml文件。</p><p><img src="/images/20180822200946.png" alt="修改主题">      </p><p>　　找到这行修改为<code>next</code>,注意<code>:</code>后面有个空格，不能删除。然后依次运行如下命令，      </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>　　切换过来了，然后我们再进行一些细致的修改。<br>　　打开_config.yml文件。           </p><p><img src="/images/20180822202520.png" alt="细节修改"><br><img src="/images/20180822203421.png" alt="语言">      </p><p>　　语言可以对应这个修改。<br>　　我们再来修改一下页面。添加个分类、关于什么的。打开<code>themes/next/_config.yml</code>文件，找到menu,去掉自己想要的页面前面的注释，前后顺序也可以自己改，也可以自定义页面，前提要符合规则。</p><p><img src="/images/20180822204005.png" alt="页面"><br><img src="/images/20180822204126.png" alt="页面">        </p><p>　　当然，这还没有完。创建首页。比如分类首页：           </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p><img src="/images/20180822205113.png" alt="index">     </p><p>　　你可以看到那个新建的index.md,打开它，进行修改。添加一行<code>type: &quot;categories&quot;</code> ,具体分类可以依照官方文档自己添加，其他页面类似。      </p><p><img src="/images/20180822205644.png" alt="分类页面"><br><img src="/images/20180822210300.png" alt="其他页面">      </p><p>　　继续执行这三条命令就可以看到效果。   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/20180822211049.png" alt="本地效果"><br>　　其他自己想要修改的可以参考<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lmlpc3NuYW4uY29tL2dldHRpbmctc3RhcnRlZC5odG1s">官方教程<i class="fa fa-external-link-alt"></i></span> 和<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0L3dpa2k=">wiki<i class="fa fa-external-link-alt"></i></span>。</p><ol start="4"><li>部署到github。登录到github，新建repository，   </li></ol><p><img src="/images/20180822211715.png" alt="新建仓库">      </p><p>　　如果你以<code>yourname.github.io</code>作为仓库名字，以后就可以直接用<code>yourname.github.io</code>作域名直接访问了。当然你觉得不够漂亮也可以用自己的域名，域名指向github,在设置里Custom domain那里填上自己的域名。详情<span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==">GitHub Pages<i class="fa fa-external-link-alt"></i></span>      </p><p><img src="/images/20180822212505.png" alt="url">       </p><p>　　如果你的<code>yourname.github.io</code>用做其他用途了，你想用你自己的域名怎么办？也很简单。建repository时随便起个名字，      </p><p><img src="/images/20180822213423.png" alt="another re">    </p><p>　　把你的域名解析到github的两个ip。   </p><pre><code>192.30.252.153192.30.252.154</code></pre><p><img src="/images/20180822213755.png" alt="">     </p><p>　　然后打开repository的setting,这里改为master branch,save,下面填上自己的域名,再给 repository里新建个index.html就可以访问了。   </p><p><img src="/images/20180822214540.png" alt=""><br><img src="/images/20180822214846.png" alt="">      </p><p>　　如果你觉得你的域名没法加https,不够帅，那就去<span class="exturl" data-url="aHR0cHM6Ly9kYXNoLmNsb3VkZmxhcmUuY29tL2xvZ2lu">cloudflare<i class="fa fa-external-link-alt"></i></span>(cloudflare安全吗？这个你自己掂量，匿名dns 1.1.1.1就是它家推出的),把自己域名的DNS server改为cloudflare,在cloudflare控制面板里做刚才的域名解析然后把ssl开启就行了，      </p><p><img src="/images/20180822220139.png" alt="startjx"><br><img src="/images/20180822215837.png" alt="startssl"><br><img src="/images/20180822220531.png" alt="xiaoguo"></p><p>　　然后接下来该怎么办呢？进入hexo目录，打开_config.yml文件。   </p><p><img src="/images/20180822221021.png" alt="修改配置"><br><img src="/images/20180822221614.png" alt="修改配置">      </p><p>　　注意这里的repo地址最好填git协议的，不要填https协议的，这样不用每次都输密码，地址在这里找      </p><p><img src="/images/20180822221443.png" alt="git address">       </p><p>　　如果是https协议的话，点一下右上角的Use SSH,复制地址粘贴到_config.yml文件repo位置即可，但要注意<code>:</code>后面的空格不要删，否则会失效。     </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>　　如果新建文章就使用<code>hexo n 文章标题</code>来新建文章，使用<code>markdown</code>语法，然后推送即可。<br>　　然后在source目录下新建文件CNAME,里面写上你的域名。执行上面命令后可能会出现许多warning,不要紧的，git执行Linux命令行，在Linux下的换行符为LF，而windows下的换行符为 CRLF，默认自动转换是true。如果你有强迫症，也可以自己改。就算完成了。</p><h3 id="Linux-平台"><a href="#Linux-平台" class="headerlink" title="Linux 平台"></a>Linux 平台</h3><p>Linux上和Windows上其实差不多，甚至更简单,我的环境是centos7,代理工具是<code>shadowsocks</code>。     </p><ol><li><p>设置终端代理。这次我们使用代理安装软件(如果没有代理，就按照上面Windows的方法，使用阿里云的源即可)。打开linux终端，输入<code>su</code>进入<code>root</code>用户，输入如下命令：        </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@la ~]<span class="comment"># yum install vim epel-release git curl  -y  #安装一些软件包</span></span><br><span class="line">[root@la ~]<span class="comment"># pip -V    #看一下系统有没有装，没有就运行 sudo yum install python-pip</span></span><br><span class="line">[root@la ~]<span class="comment"># pip install shadowsocks</span></span><br><span class="line">[root@la ~]<span class="comment"># mkdir /etc/shadowsocks</span></span><br><span class="line">[root@la ~]<span class="comment"># vim /etc/shadowsocks/config.json      # config.json 里面写上代理的信息</span></span><br><span class="line">[root@la ~]<span class="comment"># sslocal -c /etc/shadowsocks/config.json -d start    #如果成功的话，你在浏览器就能打开谷歌了。如果你觉得这样麻烦，可以新建一个服务，用systemctl 管理shadowsocks.</span></span><br><span class="line">[root@la ~]<span class="comment"># vim /etc/systemd/system/ss.service</span></span><br><span class="line">里面写上：</span><br><span class="line">        [Unit]</span><br><span class="line">        Description=ss</span><br><span class="line">        [Service]</span><br><span class="line">        TimeoutStartSec=0</span><br><span class="line">        ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/config.json</span><br><span class="line">        [Install]</span><br><span class="line">        WantedBy=multi-user.target</span><br><span class="line">[root@la ~]<span class="comment"># systemctl stop ss     #停止ss</span></span><br><span class="line">[root@la ~]<span class="comment"># systemctl start ss    #开启ss</span></span><br><span class="line">[root@la ~]<span class="comment"># systemctl restart ss  #重启ss</span></span><br></pre></td></tr></table></figure><p>　　但是终端还是不能代理，我们还需要一步，用<code>proxychain4</code>进行终端代理。输入如下命令：       </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@la ~]<span class="comment"># git clone https://github.com/rofl0r/proxychains-ng</span></span><br><span class="line">[root@la ~]<span class="comment"># cd proxychains-ng</span></span><br><span class="line">[root@la ~]<span class="comment"># ./configure --prefix=/usr --sysconfdir=/etc</span></span><br><span class="line">[root@la ~]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">[root@la ~]<span class="comment"># make install-config</span></span><br><span class="line">[root@la ~]<span class="comment"># vim /etc/proxychains.conf</span></span><br><span class="line">注释掉最后一行 socks4         127.0.0.1 9050</span><br><span class="line">写上自己的代理 socks5  127.0.0.1 1080</span><br><span class="line">测试一下</span><br><span class="line">[root@la ~]<span class="comment"># proxychains4 curl www.google.com</span></span><br></pre></td></tr></table></figure><p>　　如果你觉得每次都要输入很麻烦，你可以设置一下环境变量。或者让本终端使用代理       </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@la ~]<span class="comment"># proxychains4  -q /bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>终端代理设置完了，然后我们来安装<code>nodejs</code>。Hexo官方说安装<code>nodejs</code>最好方式是使用nvm，今天我们换一种方式。          </p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@la ~]<span class="comment"># yum install gcc-c++ -y</span></span><br><span class="line">[root@la ~]<span class="comment"># curl -sL https://rpm.nodesource.com/setup_10.x | sudo -E bash -                    #版本号自己选</span></span><br><span class="line">[root@la ~]<span class="comment"># yum install -y nodejs</span></span><br><span class="line">[root@la ~]<span class="comment"># curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo</span></span><br><span class="line">[root@la ~]<span class="comment"># yum install yarn     #这次我们不使用npm管理器，使用yarn,yarn也被墙了，没有代理的话也可以使用阿里云的源。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装<code>git</code>。<code>yum install git -y</code>这就安装好了，生成密钥，<code>ssh-keygen -t rsa -b 4096 -C &quot;user@example.com&quot;</code>，然后和windows那里说的一样，把公钥，也就是<code>.pub</code>结尾的文件里面的内容添加到你的<code>git</code>账号即可。</li></ol><p><img src="/images/20180823171644.png" alt="添加生成密钥">        </p><p>　　如果你有多个密钥要用，最好把密钥文件名改一下，避免覆盖。要使用的话也简单，建立一个config文件，里面写上：     </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_git    <span class="comment">#密钥文件名及路径写你自己的</span></span><br><span class="line">User git</span><br><span class="line">然后配置用户名和邮箱</span><br><span class="line">[root@la ~]<span class="comment"># git config --global user.email "you@example.com"</span></span><br><span class="line">[root@la ~]<span class="comment"># git config --global user.name  "username"</span></span><br></pre></td></tr></table></figure><ol start="4"><li>安装hexo。 使用yarn安装。        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@la ~]<span class="comment"># yarn global add hexo-cli</span></span><br><span class="line">[root@la ~]<span class="comment"># cd /home</span></span><br><span class="line">[root@la home]<span class="comment"># mkdir blog</span></span><br><span class="line">[root@la home]<span class="comment"># cd blog</span></span><br><span class="line">[root@la blog]<span class="comment"># hexo init</span></span><br><span class="line">[root@la blog]<span class="comment"># yarn add hexo-deployer-git</span></span><br></pre></td></tr></table></figure></li><li>然后剩下的就和上面Windows一样了，修改<code>_config.yml</code>、修改主题啥的，使用什么工具修改随你了，vim、nano都可以，<code>markdown</code>语法,就那三条命令。<code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code>。</li></ol><h3 id="Android平台"><a href="#Android平台" class="headerlink" title="Android平台"></a>Android平台</h3><p>你想在手机上写博客吗？当然可以，手机上代理直接挂个VPN就行。然后安装神器<code>Termux</code>，安装<code>git</code>、<code>nodejs</code>、<code>yarn</code>或者<code>npm</code>。剩下的操作和<code>linux</code>一样。</p><p>如果哪里写的有问题，也不要找我 ^_^ ,祝大家搞基快乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　写一下hexo怎么搭建，以免自己以后忘记。&lt;br&gt;　　首先得确定你是在windows平台上工作还是在linux平台上工作，这两种方式本地环境配置其实大同小异。&lt;/p&gt;
&lt;h3 id=&quot;Windows-平台&quot;&gt;&lt;a href=&quot;#Windows-平台&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.yturing.com/categories/Linux/"/>
    
    
      <category term="Hexo" scheme="https://www.yturing.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.yturing.com/2018/08/21/HelloWorld/"/>
    <id>https://www.yturing.com/2018/08/21/HelloWorld/</id>
    <published>2018-08-21T08:39:20.000Z</published>
    <updated>2020-07-10T09:12:35.370Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align:center"> Hello World!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align:center&quot;&gt; Hello World!&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
